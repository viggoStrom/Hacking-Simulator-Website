{
	"rows": [
		"function addIconToPanel(statusIcon) {",
		"\tif (!(statusIcon instanceof BaseStatusIcon))",
		"\t\tthrow TypeError(`Unexpected icon type: ${statusIcon}`);",
		" ",
		"\tconst settings = SettingsManager.getDefaultGSettings();",
		"\tconst indicatorId = `appindicator-${statusIcon.uniqueId}`;",
		" ",
		"\tconst currentIcon = Main.panel.statusArea[indicatorId];",
		"\tif (currentIcon) {",
		"\t\tif (currentIcon !== statusIcon)",
		"\t\t\tcurrentIcon.destroy();",
		" ",
		"\t\tMain.panel.statusArea[indicatorId] = null;",
		"\t}",
		" ",
		"\tMain.panel.addToStatusArea(indicatorId, statusIcon, 1,",
		"\t\tsettings.get_string('tray-pos'));",
		" ",
		"\tUtil.connectSmart(settings, 'changed::tray-pos', statusIcon, () =>",
		"\t\taddIconToPanel(statusIcon));",
		"}",
		" ",
		"function getTrayIcons() {",
		"\treturn Object.values(Main.panel.statusArea).filter(",
		"\t\ti => i instanceof IndicatorStatusTrayIcon);",
		"}",
		" ",
		"function getAppIndicatorIcons() {",
		"\treturn Object.values(Main.panel.statusArea).filter(",
		"\t\ti => i instanceof IndicatorStatusIcon);",
		"}",
		" ",
		"var BaseStatusIcon = GObject.registerClass(",
		"class AppIndicatorsIndicatorBaseStatusIcon extends PanelMenu.Button {",
		"\t_init(menuAlignment, nameText, iconActor, dontCreateMenu) {",
		"\t\tsuper._init(menuAlignment, nameText, dontCreateMenu);",
		" ",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tUtil.connectSmart(settings, 'changed::icon-opacity', this, this._updateOpacity);",
		"\t\tthis.connect('notify::hover', () => this._onHoverChanged());",
		" ",
		"\t\tif (!super._onDestroy)",
		"\t\t\tthis.connect('destroy', () => this._onDestroy());",
		" ",
		"\t\tthis._box = new St.BoxLayout({ style_class: 'panel-status-indicators-box' });",
		"\t\tthis.add_child(this._box);",
		" ",
		"\t\tthis._setIconActor(iconActor);",
		"\t\tthis._showIfReady();",
		"\t}",
		" ",
		"\t_setIconActor(icon) {",
		"\t\tif (!(icon instanceof Clutter.Actor))",
		"\t\t\tthrow new Error(`${icon} is not a valid actor`);",
		" ",
		"\t\tif (this._icon && this._icon !== icon)",
		"\t\t\tthis._icon.destroy();",
		" ",
		"\t\tthis._icon = icon;",
		"\t\tthis._updateEffects();",
		"\t\tthis._monitorIconEffects();",
		" ",
		"\t\tif (this._icon) {",
		"\t\t\tthis._box.add_child(this._icon);",
		"\t\t\tconst id = this._icon.connect('destroy', () => {",
		"\t\t\t\tthis._icon.disconnect(id);",
		"\t\t\t\tthis._icon = null;",
		"\t\t\t\tthis._monitorIconEffects();",
		"\t\t\t});",
		"\t\t}",
		"\t}",
		" ",
		"\t_onDestroy() {",
		"\t\tif (this._icon)",
		"\t\t\tthis._icon.destroy();",
		" ",
		"\t\tif (super._onDestroy)",
		"\t\t\tsuper._onDestroy();",
		"\t}",
		" ",
		"\tisReady() {",
		"\t\tthrow new GObject.NotImplementedError('isReady() in %s'.format(this.constructor.name));",
		"\t}",
		" ",
		"\tget icon() {",
		"\t\treturn this._icon;",
		"\t}",
		" ",
		"\tget uniqueId() {",
		"\t\tthrow new GObject.NotImplementedError('uniqueId in %s'.format(this.constructor.name));",
		"\t}",
		" ",
		"\t_showIfReady() {",
		"\t\tthis.visible = this.isReady();",
		"\t}",
		" ",
		"\t_onHoverChanged() {",
		"\t\tif (this.hover) {",
		"\t\t\tthis.opacity = 255;",
		"\t\t\tif (this._icon)",
		"\t\t\t\tthis._icon.remove_effect_by_name('desaturate');",
		"\t\t} else {",
		"\t\t\tthis._updateEffects();",
		"\t\t}",
		"\t}",
		" ",
		"\t_updateOpacity() {",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tconst userValue = settings.get_user_value('icon-opacity');",
		"\t\tif (userValue)",
		"\t\t\tthis.opacity = userValue.unpack();",
		"\t\telse if (Util.versionCheck(['40']))",
		"\t\t\tthis.opacity = 255;",
		"\t\telse",
		"\t\t\tthis.opacity = settings.get_int('icon-opacity');",
		"\t}",
		" ",
		"\t_updateEffects() {",
		"\t\tthis._updateOpacity();",
		" ",
		"\t\tif (this._icon) {",
		"\t\t\tthis._updateSaturation();",
		"\t\t\tthis._updateBrightnessContrast();",
		"\t\t}",
		"\t}",
		" ",
		"\t_monitorIconEffects() {",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tconst monitoring = !!this._iconSaturationIds;",
		" ",
		"\t\tif (!this._icon && monitoring) {",
		"\t\t\tUtil.disconnectSmart(settings, this, this._iconSaturationIds);",
		"\t\t\tdelete this._iconSaturationIds;",
		" ",
		"\t\t\tUtil.disconnectSmart(settings, this, this._iconBrightnessIds);",
		"\t\t\tdelete this._iconBrightnessIds;",
		" ",
		"\t\t\tUtil.disconnectSmart(settings, this, this._iconContrastIds);",
		"\t\t\tdelete this._iconContrastIds;",
		"\t\t} else if (this._icon && !monitoring) {",
		"\t\t\tthis._iconSaturationIds =",
		"\t\t\t\tUtil.connectSmart(settings, 'changed::icon-saturation', this,",
		"\t\t\t\t\tthis._updateSaturation);",
		"\t\t\tthis._iconBrightnessIds =",
		"\t\t\t\tUtil.connectSmart(settings, 'changed::icon-brightness', this,",
		"\t\t\t\t\tthis._updateBrightnessContrast);",
		"\t\t\tthis._iconContrastIds =",
		"\t\t\t\tUtil.connectSmart(settings, 'changed::icon-contrast', this,",
		"\t\t\t\t\tthis._updateBrightnessContrast);",
		"\t\t}",
		"\t}",
		" ",
		"\t_updateSaturation() {",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tconst desaturationValue = settings.get_double('icon-saturation');",
		"\t\tlet desaturateEffect = this._icon.get_effect('desaturate');",
		" ",
		"\t\tif (desaturationValue > 0) {",
		"\t\t\tif (!desaturateEffect) {",
		"\t\t\t\tdesaturateEffect = new Clutter.DesaturateEffect();",
		"\t\t\t\tthis._icon.add_effect_with_name('desaturate', desaturateEffect);",
		"\t\t\t}",
		"\t\t\tdesaturateEffect.set_factor(desaturationValue);",
		"\t\t} else if (desaturateEffect) {",
		"\t\t\tthis._icon.remove_effect(desaturateEffect);",
		"\t\t}",
		"\t}",
		" ",
		"\t_updateBrightnessContrast() {",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tconst brightnessValue = settings.get_double('icon-brightness');",
		"\t\tconst contrastValue = settings.get_double('icon-contrast');",
		"\t\tlet brightnessContrastEffect = this._icon.get_effect('brightness-contrast');",
		" ",
		"\t\tif (brightnessValue !== 0 | contrastValue !== 0) {",
		"\t\t\tif (!brightnessContrastEffect) {",
		"\t\t\t\tbrightnessContrastEffect = new Clutter.BrightnessContrastEffect();",
		"\t\t\t\tthis._icon.add_effect_with_name('brightness-contrast', brightnessContrastEffect);",
		"\t\t\t}",
		"\t\t\tbrightnessContrastEffect.set_brightness(brightnessValue);",
		"\t\t\tbrightnessContrastEffect.set_contrast(contrastValue);",
		"\t\t} else if (brightnessContrastEffect) {",
		"\t\t\tthis._icon.remove_effect(brightnessContrastEffect);",
		"\t\t}",
		"\t}",
		"});",
		" ",
		"/*",
		" * IndicatorStatusIcon implements an icon in the system status area",
		" */",
		"var IndicatorStatusIcon = GObject.registerClass(",
		"class AppIndicatorsIndicatorStatusIcon extends BaseStatusIcon {",
		"\t_init(indicator) {",
		"\t\tsuper._init(0.5, indicator.accessibleName,",
		"\t\t\tnew AppIndicator.IconActor(indicator, Panel.PANEL_ICON_SIZE));",
		"\t\tthis._indicator = indicator;",
		" ",
		"\t\tthis._lastClickTime = -1;",
		"\t\tthis._lastClickX = -1;",
		"\t\tthis._lastClickY = -1;",
		" ",
		"\t\tthis._box.add_style_class_name('appindicator-box');",
		" ",
		"\t\tUtil.connectSmart(this._indicator, 'ready', this, this._showIfReady);",
		"\t\tUtil.connectSmart(this._indicator, 'menu', this, this._updateMenu);",
		"\t\tUtil.connectSmart(this._indicator, 'label', this, this._updateLabel);",
		"\t\tUtil.connectSmart(this._indicator, 'status', this, this._updateStatus);",
		"\t\tUtil.connectSmart(this._indicator, 'reset', this, () => {",
		"\t\t\tthis._updateStatus();",
		"\t\t\tthis._updateLabel();",
		"\t\t});",
		"\t\tUtil.connectSmart(this.icon, 'requires-custom-image', this, () => {",
		"\t\t\tthis._setIconActor(new AppIndicator.CustomImageIconActor(",
		"\t\t\t\tindicator, Panel.PANEL_ICON_SIZE));",
		"\t\t});",
		"\t\tUtil.connectSmart(this._indicator, 'accessible-name', this, () =>",
		"\t\t\tthis.set_accessible_name(this._indicator.accessibleName));",
		"\t\tUtil.connectSmart(this._indicator, 'destroy', this, () => this.destroy());",
		" ",
		"\t\tthis.connect('notify::visible', () => this._updateMenu());",
		" ",
		"\t\tthis._showIfReady();",
		"\t}",
		" ",
		"\t_onDestroy() {",
		"\t\tif (this._menuClient) {",
		"\t\t\tthis._menuClient.disconnect(this._menuReadyId);",
		"\t\t\tthis._menuClient.destroy();",
		"\t\t\tthis._menuClient = null;",
		"\t\t}",
		" ",
		"\t\tsuper._onDestroy();",
		"\t}",
		" ",
		"\tget uniqueId() {",
		"\t\treturn this._indicator.uniqueId;",
		"\t}",
		" ",
		"\tisReady() {",
		"\t\treturn this._indicator && this._indicator.isReady;",
		"\t}",
		" ",
		"\t_updateLabel() {",
		"\t\tvar label = this._indicator.label;",
		"\t\tif (label) {",
		"\t\t\tif (!this._label || !this._labelBin) {",
		"\t\t\t\tthis._labelBin = new St.Bin({",
		"\t\t\t\t\ty_align: Util.versionCheck(['3.34'])",
		"\t\t\t\t\t\t? St.Align.MIDDLE : Clutter.ActorAlign.CENTER,",
		"\t\t\t\t});",
		"\t\t\t\tthis._label = new St.Label();",
		"\t\t\t\tthis._labelBin.add_actor(this._label);",
		"\t\t\t\tthis._box.add_actor(this._labelBin);",
		"\t\t\t}",
		"\t\t\tthis._label.set_text(label);",
		"\t\t\tif (!this._box.contains(this._labelBin))",
		"\t\t\t\tthis._box.add_actor(this._labelBin); // FIXME: why is it suddenly necessary?",
		"\t\t} else if (this._label) {",
		"\t\t\tthis._labelBin.destroy_all_children();",
		"\t\t\tthis._box.remove_actor(this._labelBin);",
		"\t\t\tthis._labelBin.destroy();",
		"\t\t\tdelete this._labelBin;",
		"\t\t\tdelete this._label;",
		"\t\t}",
		"\t}",
		" ",
		"\t_updateStatus() {",
		"\t\tconst wasVisible = this.visible;",
		"\t\tthis.visible = this._indicator.status !== AppIndicator.SNIStatus.PASSIVE;",
		" ",
		"\t\tif (this.visible !== wasVisible)",
		"\t\t\tthis._indicator.checkAlive().catch(logError);",
		"\t}",
		" ",
		"\t_updateMenu() {",
		"\t\tif (this._menuClient) {",
		"\t\t\tthis._menuClient.disconnect(this._menuReadyId);",
		"\t\t\tthis._menuClient.destroy();",
		"\t\t\tthis._menuClient = null;",
		"\t\t\tthis.menu.removeAll();",
		"\t\t}",
		" ",
		"\t\tif (this.visible && this._indicator.menuPath) {",
		"\t\t\tthis._menuClient = new DBusMenu.Client(this._indicator.busName,",
		"\t\t\t\tthis._indicator.menuPath, this._indicator);",
		" ",
		"\t\t\tif (this._menuClient.isReady)",
		"\t\t\t\tthis._menuClient.attachToMenu(this.menu);",
		" ",
		"\t\t\tthis._menuReadyId = this._menuClient.connect('ready-changed', () => {",
		"\t\t\t\tif (this._menuClient.isReady)",
		"\t\t\t\t\tthis._menuClient.attachToMenu(this.menu);",
		"\t\t\t\telse",
		"\t\t\t\t\tthis._updateMenu();",
		"\t\t\t});",
		"\t\t}",
		"\t}",
		" ",
		"\t_showIfReady() {",
		"\t\tif (!this.isReady())",
		"\t\t\treturn;",
		" ",
		"\t\tthis._updateLabel();",
		"\t\tthis._updateStatus();",
		"\t\tthis._updateMenu();",
		"\t}",
		" ",
		"\t_updateClickCount(buttonEvent) {",
		"\t\tconst { x, y, time } = buttonEvent;",
		"\t\tconst { doubleClickDistance, doubleClickTime } =",
		"\t\t\tClutter.Settings.get_default();",
		" ",
		"\t\tif (time > (this._lastClickTime + doubleClickTime) ||",
		"\t\t\t(Math.abs(x - this._lastClickX) > doubleClickDistance) ||",
		"\t\t\t(Math.abs(y - this._lastClickY) > doubleClickDistance))",
		"\t\t\tthis._clickCount = 0;",
		" ",
		"\t\tthis._lastClickTime = time;",
		"\t\tthis._lastClickX = x;",
		"\t\tthis._lastClickY = y;",
		" ",
		"\t\tthis._clickCount = (this._clickCount % 2) + 1;",
		" ",
		"\t\treturn this._clickCount;",
		"\t}",
		" ",
		"\t_maybeHandleDoubleClick(buttonEvent) {",
		"\t\tif (this._indicator.supportsActivation === false)",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		" ",
		"\t\tif (buttonEvent.button !== Clutter.BUTTON_PRIMARY)",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		" ",
		"\t\tif (buttonEvent.click_count === 2 ||",
		"\t\t\t(buttonEvent.click_count === undefined &&",
		"\t\t\t this._updateClickCount(buttonEvent) === 2)) {",
		"\t\t\tthis._indicator.open(buttonEvent.x, buttonEvent.y, buttonEvent.time);",
		"\t\t\treturn Clutter.EVENT_STOP;",
		"\t\t}",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		" ",
		"\tasync _waitForDoubleClick() {",
		"\t\tconst { doubleClickTime } = Clutter.Settings.get_default();",
		"\t\tthis._waitDoubleClickPromise = new PromiseUtils.TimeoutPromise(",
		"\t\t\tdoubleClickTime);",
		" ",
		"\t\ttry {",
		"\t\t\tawait this._waitDoubleClickPromise;",
		"\t\t\tthis.menu.toggle();",
		"\t\t} catch (e) {",
		"\t\t\tif (!e.matches(Gio.IOErrorEnum, Gio.IOErrorEnum.CANCELLED))",
		"\t\t\t\tthrow e;",
		"\t\t} finally {",
		"\t\t\tdelete this._waitDoubleClickPromise;",
		"\t\t}",
		"\t}",
		" ",
		"\tvfunc_event(event) {",
		"\t\tif (this.menu.numMenuItems && event.type() === Clutter.EventType.TOUCH_BEGIN)",
		"\t\t\tthis.menu.toggle();",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		" ",
		"\tvfunc_button_press_event(buttonEvent) {",
		"\t\tif (this._waitDoubleClickPromise)",
		"\t\t\tthis._waitDoubleClickPromise.cancel();",
		" ",
		"\t\t// if middle mouse button clicked send SecondaryActivate dbus event and do not show appindicator menu",
		"\t\tif (buttonEvent.button === Clutter.BUTTON_MIDDLE) {",
		"\t\t\tif (Main.panel.menuManager.activeMenu)",
		"\t\t\t\tMain.panel.menuManager._closeMenu(true, Main.panel.menuManager.activeMenu);",
		"\t\t\tthis._indicator.secondaryActivate(buttonEvent.time, buttonEvent.x, buttonEvent.y);",
		"\t\t\treturn Clutter.EVENT_STOP;",
		"\t\t}",
		" ",
		"\t\tif (buttonEvent.button === Clutter.BUTTON_SECONDARY) {",
		"\t\t\tthis.menu.toggle();",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t\t}",
		" ",
		"\t\tconst doubleClickHandled = this._maybeHandleDoubleClick(buttonEvent);",
		"\t\tif (doubleClickHandled === Clutter.EVENT_PROPAGATE &&",
		"\t\t\tbuttonEvent.button === Clutter.BUTTON_PRIMARY &&",
		"\t\t\tthis.menu.numMenuItems) {",
		"\t\t\tif (this._indicator.supportsActivation)",
		"\t\t\t\tthis._waitForDoubleClick().catch(logError);",
		"\t\t\telse",
		"\t\t\t\tthis.menu.toggle();",
		"\t\t}",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		" ",
		"\tvfunc_button_release_event(buttonEvent) {",
		"\t\tif (!this._indicator.supportsActivation)",
		"\t\t\treturn this._maybeHandleDoubleClick(buttonEvent);",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		" ",
		"\tvfunc_scroll_event(scrollEvent) {",
		"\t\t// Since Clutter 1.10, clutter will always send a smooth scrolling event",
		"\t\t// with explicit deltas, no matter what input device is used",
		"\t\t// In fact, for every scroll there will be a smooth and non-smooth scroll",
		"\t\t// event, and we can choose which one we interpret.",
		"\t\tif (scrollEvent.direction === Clutter.ScrollDirection.SMOOTH) {",
		"\t\t\tconst event = Clutter.get_current_event();",
		"\t\t\tlet [dx, dy] = event.get_scroll_delta();",
		" ",
		"\t\t\tthis._indicator.scroll(dx, dy);",
		"\t\t\treturn Clutter.EVENT_STOP;",
		"\t\t}",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		"});",
		" ",
		"var IndicatorStatusTrayIcon = GObject.registerClass(",
		"class AppIndicatorsIndicatorTrayIcon extends BaseStatusIcon {",
		"\t_init(icon) {",
		"\t\tsuper._init(0.5, icon.wm_class, icon, { dontCreateMenu: true });",
		"\t\tUtil.Logger.debug(`Adding legacy tray icon ${this.uniqueId}`);",
		"\t\tthis._box.add_style_class_name('appindicator-trayicons-box');",
		"\t\tthis.add_style_class_name('appindicator-icon');",
		"\t\tthis.add_style_class_name('tray-icon');",
		" ",
		"\t\tthis.connect('button-press-event', (_actor, _event) => {",
		"\t\t\tthis.add_style_pseudo_class('active');",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t\t});",
		"\t\tthis.connect('button-release-event', (_actor, event) => {",
		"\t\t\tthis._icon.click(event);",
		"\t\t\tthis.remove_style_pseudo_class('active');",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t\t});",
		"\t\tthis.connect('key-press-event', (_actor, event) => {",
		"\t\t\tthis.add_style_pseudo_class('active');",
		"\t\t\tthis._icon.click(event);",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t\t});",
		"\t\tthis.connect('key-release-event', (_actor, event) => {",
		"\t\t\tthis._icon.click(event);",
		"\t\t\tthis.remove_style_pseudo_class('active');",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t\t});",
		" ",
		"\t\tUtil.connectSmart(this._icon, 'destroy', this, () => {",
		"\t\t\ticon.clear_effects();",
		"\t\t\tthis.destroy();",
		"\t\t});",
		" ",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tUtil.connectSmart(settings, 'changed::icon-size', this, this._updateIconSize);",
		" ",
		"\t\tconst themeContext = St.ThemeContext.get_for_stage(global.stage);",
		"\t\tUtil.connectSmart(themeContext, 'notify::scale-factor', this, () =>",
		"\t\t\tthis._updateIconSize());",
		" ",
		"\t\tthis._updateIconSize();",
		"\t}",
		" ",
		"\t_onDestroy() {",
		"\t\tUtil.Logger.debug(`Destroying legacy tray icon ${this.uniqueId}`);",
		" ",
		"\t\tif (this._waitDoubleClickPromise)",
		"\t\t\tthis._waitDoubleClickPromise.cancel();",
		" ",
		"\t\tsuper._onDestroy();",
		"\t}",
		" ",
		"\tisReady() {",
		"\t\treturn !!this._icon;",
		"\t}",
		" ",
		"\tget uniqueId() {",
		"\t\treturn `legacy:${this._icon.wm_class}:${this._icon.pid}`;",
		"\t}",
		" ",
		"\tvfunc_navigate_focus(from, direction) {",
		"\t\tthis.grab_key_focus();",
		"\t\treturn super.vfunc_navigate_focus(from, direction);",
		"\t}",
		" ",
		"\t_getSimulatedButtonEvent(touchEvent) {",
		"\t\tconst event = Clutter.Event.new(Clutter.EventType.BUTTON_RELEASE);",
		"\t\tevent.set_button(1);",
		"\t\tevent.set_time(touchEvent.time);",
		"\t\tevent.set_flags(touchEvent.flags);",
		"\t\tevent.set_stage(touchEvent.stage);",
		"\t\tevent.set_source(touchEvent.source);",
		"\t\tevent.set_coords(touchEvent.x, touchEvent.y);",
		"\t\tevent.set_state(touchEvent.modifier_state);",
		"\t\treturn event;",
		"\t}",
		" ",
		"\tvfunc_touch_event(touchEvent) {",
		"\t\t// Under X11 we rely on emulated pointer events",
		"\t\tif (!imports.gi.Meta.is_wayland_compositor())",
		"\t\t\treturn Clutter.EVENT_PROPAGATE;",
		" ",
		"\t\tconst slot = touchEvent.sequence.get_slot();",
		" ",
		"\t\tif (!this._touchPressSlot &&",
		"\t\t\ttouchEvent.type === Clutter.EventType.TOUCH_BEGIN) {",
		"\t\t\tthis.add_style_pseudo_class('active');",
		"\t\t\tthis._touchButtonEvent = this._getSimulatedButtonEvent(touchEvent);",
		"\t\t\tthis._touchPressSlot = slot;",
		"\t\t\tthis._touchDelayPromise = new PromiseUtils.TimeoutPromise(",
		"\t\t\t\tAppDisplay.MENU_POPUP_TIMEOUT);",
		"\t\t\tthis._touchDelayPromise.then(() => {",
		"\t\t\t\tdelete this._touchDelayPromise;",
		"\t\t\t\tdelete this._touchPressSlot;",
		"\t\t\t\tthis._touchButtonEvent.set_button(3);",
		"\t\t\t\tthis._icon.click(this._touchButtonEvent);",
		"\t\t\t\tthis.remove_style_pseudo_class('active');",
		"\t\t\t});",
		"\t\t} else if (touchEvent.type === Clutter.EventType.TOUCH_END &&",
		"\t\t\t\t   this._touchPressSlot === slot) {",
		"\t\t\tdelete this._touchPressSlot;",
		"\t\t\tdelete this._touchButtonEvent;",
		"\t\t\tif (this._touchDelayPromise) {",
		"\t\t\t\tthis._touchDelayPromise.cancel();",
		"\t\t\t\tdelete this._touchDelayPromise;",
		"\t\t\t}",
		" ",
		"\t\t\tthis._icon.click(this._getSimulatedButtonEvent(touchEvent));",
		"\t\t\tthis.remove_style_pseudo_class('active');",
		"\t\t} else if (touchEvent.type === Clutter.EventType.TOUCH_UPDATE &&",
		"\t\t\t\t   this._touchPressSlot === slot) {",
		"\t\t\tthis.add_style_pseudo_class('active');",
		"\t\t\tthis._touchButtonEvent = this._getSimulatedButtonEvent(touchEvent);",
		"\t\t}",
		" ",
		"\t\treturn Clutter.EVENT_PROPAGATE;",
		"\t}",
		" ",
		"\tvfunc_leave_event(crossingEvent) {",
		"\t\tthis.remove_style_pseudo_class('active');",
		" ",
		"\t\tif (this._touchDelayPromise) {",
		"\t\t\tthis._touchDelayPromise.cancel();",
		"\t\t\tdelete this._touchDelayPromise;",
		"\t\t}",
		" ",
		"\t\treturn super.vfunc_leave_event(crossingEvent);",
		"\t}",
		" ",
		"\t_updateIconSize() {",
		"\t\tconst settings = SettingsManager.getDefaultGSettings();",
		"\t\tconst { scaleFactor } = St.ThemeContext.get_for_stage(global.stage);",
		"\t\tlet iconSize = settings.get_int('icon-size');",
		" ",
		"\t\tif (iconSize <= 0)",
		"\t\t\ticonSize = Panel.PANEL_ICON_SIZE;",
		" ",
		"\t\tthis.height = -1;",
		"\t\tthis._icon.set_width(iconSize * scaleFactor);",
		"\t\tthis._icon.set_height(iconSize * scaleFactor);",
		"\t\tthis._icon.set_y_align(Clutter.ActorAlign.CENTER);",
		"\t\tthis._icon.set_x_align(Clutter.ActorAlign.CENTER);",
		"\t}",
		"});"
	]
}